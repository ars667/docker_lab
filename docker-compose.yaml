services:
  influxdb:
    container_name: influxdb
    image: influxdb:2.7.1
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: default
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    restart: unless-stopped
    ports:
      - ${INFLUXDB_PORT}:${INFLUXDB_PORT}
    networks:
      - persistent_bridge_network
  postgres:
    container_name: postgres
    image: postgres:15.4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DBNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/db.sql
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - persistent_bridge_network
  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - ${PGADMIN_PORT}:80
    depends_on:
      postgres:
        condition: service_healthy
  app:
    container_name: app
    build:
        context: .
    restart: unless-stopped
    ports:
      - ${APP_PORT}:${APP_PORT}
    networks:
      - persistent_bridge_network
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_started
volumes:
  postgres:
    driver: local

networks:
  persistent_bridge_network:
    driver: bridge
